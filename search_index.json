[["index.html", "Introduzione a R Corso per imparare le basi di R Presentazione Perchè R Struttura del libro Risorse Utili Psicostat Collaborazione Riconoscimenti Licenza", " Introduzione a R Corso per imparare le basi di R Psicostat 15-03-2021 Presentazione In questo libro impareremo le basi di R, uno dei migliori software per la visualizzazione e l’analisi statistica dei dati. Partiremo da zero intorducendo gli aspetti fondamentili di R e i concetti alla base di ogni linguaggio di programmazione che ti pemetteranno in seguito di approfondire e sviluppare le tue abilità in questo bellissimo mondo. Perchè R Ci sono molte ragioni per cui scegliere R rispetto ad altri programmi usati per condurre le analisi statistiche. Innanzitutto è un linguaggio di programmazione (come ad esempio Python, Java, C++, o Julia) e non semplicemente un’interfaccia punta e clicca (come ad esempio SPSS o JASP). Questo comporta si maggiori difficoltà iniziali ma ti ricompenserà in futuro poichè avari imparato ad utilizza uno strumennto molto potente. Inoltre, R è: nato per la statistica open-source ricco di pacchetti supportato da una grande comunità gratis Struttura del libro Il libro è suddiviso in quattro sezioni principali: Get started. Una volta installato R ed RStudio, famiglierizzeremo con l’ambiente di lavoro introducendo alcuni aspetti generali e le funzioni principali. Verranno inoltre descritte alcune buone regole per iniziare una sessione di lavoro in R. Struttura dei dati. Impareremo gli oggetti principali che R utilizza al suo interno. Variabili, vettori, matrici, dataframe e liste non avranno più segreti e capiremo come manipolarli e utlizzarli a seconda delle varie necessità. Algoritmi. Non farti spaventare da questo nome. Ne avrai spesso sentito parlarne come qualcosa di molto complicato, ma in realtà gli algoritmi sono semplicemente una serie di istruzioni che il computer segue quando deve eseguire un determinato compito. In questa sezione vedremo i principali comandi di R usati per definire degli algoritmi. Questo è il vantaggio di conoscere un linguaggio di programmazione, ci permette di creare nuovi programmi che il computer eseguirà per noi. Case study. Eseguiremo passo per passo un analisi che ci permetterà di imparare come importare i dati, codificare le variabili, manipolare e preprare i dati perle analisi, condurre delle analisi descrittive e creare dei grafici. Alla fine di questo libro probabilmente non sarete assunti da Google, ma speriamo almeno che R non vi faccia più così paura e che magari a qualcuno sia nato l’interesse di approfondire questo fantastico mondo fatto di linee di codice. Risorse Utili Segnaliamo qui per il lettore interessato del materiale online (in inglese) per approfondire le conoscenze sull’uso di R. Materiale introduttivo: R for Psychological Science di Danielle Navarro https://psyr.djnavarro.net/index.html Hands-On Programming with R di Garrett Grolemund https://rstudio-education.github.io/hopr/ Materiale intermedio: R for Data Science di Hadley Wickham e Garrett Grolemund https://r4ds.had.co.nz/ Materiale avanzato: R Packages di Hadley Wickham e Jennifer Bryan https://r-pkgs.org/ Advanced R di Hadley Wickham https://adv-r.hadley.nz/ Psicostat Questo libro è stato prodotto da Psicostat, un gruppo di ricerca interdisciplinare dell’universita di Padova che unisce la passione per la statistica e la psicologia. Se vuoi conoscere di più riguardo le nostre attività visita il nosto sito https://psicostat.dpss.psy.unipd.it/ o aggiungiti alla nostra mailing list https://lists.dpss.psy.unipd.it/postorius/lists/psicostat.lists.dpss.psy.unipd.it/. Collaborazione Se vuoi collaborare alla revione e scrittura di questo libro (ovviamente è tutto in R) visita la nostra repository di Github https://github.com/psicostat/Introduction2R. Riconoscimenti Il template di questo libro è basato su Rstudio Bookdown-demo rilasciato con licenza CC0-1.0 e rstudio4edu-book rilasciato con licenza CC BY. Nota che le illustrazioni utilizzate nelle vignette appartengono sempre a rstudio4edu-book e sono rilasciate con licenza CC BY-NC. Licenza Questo libro è rilasciato sotto la Creative Commons Attribution-ShareAlike 4.0 International Public License (CC BY-SA). Le illustrazioni utilizzate nelle vignette appartengono a rstudio4edu-book e sono rilasciate con licenza CC BY-NC. "],["intorduzione.html", "Intorduzione", " Intorduzione In questa sezione verranno presentate le istruzioni per installare R ed RStudio. In seguito, famiglierizzeremo con l’ambiente di lavoro introducendo alcuni aspetti generali e le funzioni principali. Verranno inoltre descritte alcune buone regole per iniziare una sessione di lavoro in R. I capitoli sono così organizzati: Capitolo 1 - Installare R e RStudio. Instruzioni passo a passo per installare R e RStudio Capitolo 2 - Interfaccia RStudio. Introduzione all’interfaccia utente di RStudio. Capitolo 3 - Primi Passi in R. Operatori matematici, operatori relazionali, operatori logici. Capitolo 4 - Due Compagni Inseparabili. Introduzione dei concetti di oggetti e funzioni in R. Capitolo 5 - Sessione di Lavoro. Utilizzo degli script e introduzione dei concetti di working directory e pacchetti di R. "],["install.html", "Capitolo 1 Installare R e RStudio 1.1 Installare R 1.2 Installare R Studio", " Capitolo 1 Installare R e RStudio R ed R-studio sono due software distinti. R è un linguaggio di programmazione usato in particolare in ambiti quali la statistica. R-studio invece è un’interfaccia user-friendly che permette di utilizzare R. R può essere utilizzato autonomamente tuttavia è consigliato l’utilizzo attraverso R-studio. Entrambi vanno installati separatamente e la procedura varia a seconda del proprio sistema operativo (Windows, MacOS o Linux). Riportiamo le istruzioni solo per Windows e MacOS Linux (Ubuntu). Ovviamente R è disponibile per tutte le principali distribuzioni di Linux. Le istruzioni riportate per Ubuntu (la distribuzione più diffusa) sono valide anche per le distribuzioni derivate. 1.1 Installare R Accedere al sito https://www.r-project.org Selezionare la voce CRAN (Comprehensive R Archive Network) dal menù di sinistra sotto Download Selezionare il primo link https://cloud.r-project.org/ Selezionare il proprio sistema operativo 1.1.1 R Windows Selezionare la voce base Selezionare la voce Download della versione più recente di R disponibile Al termine del download, eseguire il file e seguire le istruzioni fino al termine dell’installazione 1.1.2 R MacOS Selezionare della versione più recente di R disponibile Al termine del download, eseguire il file e seguire le istruzioni fino al termine dell’installazione di R Successivamente è necessario installare anche una componente aggiuntiva XQuartz premendo il link all’interno del riquadro arancione riportato nella figura precedente Selezionare la voce Download Al termine del download, eseguire il file e seguire le istruzioni fino al termine dell’installazione 1.1.3 R Linux Nonostante la semplicità di installazione di pacchetti su Linux, R a volte potrebbe essere più complicato da installare per via delle diverse distribuzioni, repository e chiavi per riconoscere la repository come sicura. Sul CRAN vi è la guida ufficiale con tutti i comandi apt da eseguire da terminale. Seguendo questi passaggi non dovrebbero esserci problemi. Andate sul CRAN Cliccate Download R for Linux Selezionate la vostra distribuzione (Ubuntu in questo caso) Seguite le istruzioni, principalmente eseguendo i comandi da terminale suggeriti Per qualsiasi difficoltà o errore, sopratutto con il mondo Linux, una ricerca su online risolve sempre il problema. Utilizzi avanzati di R richiedono l’insallazione di una serie ulteriore software definiti R tools. Windows Seleziona la voce Rtools e segui le istruzioni per completare l’installazione. Nota che sono richieste anche delle operazioni di configurazione affinchè tutto funzioni correttamente. MacOS Seleziona la voce tools e segui le istruzioni riportate. Nota in particolare che con R 4.0 le seguenti indicazioni sono riportate. 1.2 Installare R Studio Accedere al sito https://rstudio.com Selezionare la voce DOWNLOAD IT NOW Selezionare la versione gratuita di RStudio Desktop Selezionare la versione corretta a seconda del proprio sistema operativo Al termine del download, eseguire il file e seguire le istruzioni fino al termine dell’installazione 1.2.1 R Studio in Linux In questo caso, come su Windows e MacOS l’installazione consiste nello scaricare ed eseguire il file corretto, in base alla distribuzione (ad esempio .deb per Ubuntu e derivate). Importante, nel caso di Ubuntu (ma dovrebbe valere anche per le altre distribuzioni) anche versioni successive a quella indicata (es. Ubuntu 16) sono perfettamente compatibili. "],["rstudio-gui.html", "Capitolo 2 Interfaccia RStudio", " Capitolo 2 Interfaccia RStudio In questo capitolo presenteremo l’interfaccia utente di RStudio. Molti aspetti che introdurremo brevemente qui verranno discussi nei sucessivi capitoli. Adesso ci interessa solo famigliarizzare con l’interfaccia del nostro strumento di lavoro principale ovvero RStudio. Come abbiamo visto nel Capitolo 1, R è il vero “motore computazionale” che ci permette di compiere tutte le operazioni di calcolo, analisi statistiche e magie varie. Tuttavia l’interfaccia di base di R, definita Console (vedi Figura 2.1), è per così dire démodé o meglio, solo per veri intenditori. Figure 2.1: La console di R, solo per veri intenditori In genere, per lavorare con R viene utilizzato RStudio. RStudio è un programma (IDE - Integrated Development Environment) che integra in un unica interfaccia utente (GUI - Graphical User Interface) diversi strumenti utili per la scrittura ed esecuzione di codici. L’interfaccia di RStudio è costituita da 4 pannelli principali (vedi Figura 2.2): Figure 2.2: Interfaccia utente di Rstudio con i suoi 4 pannelli 1. Console: il cuore di R Qui ritroviamo la Console di R dove vengono effetivemente eseguiti tutti i tuoi codici e comandi. Nota come nell’ulitma riga della Console appaia il carattere &gt;. Questo è definito prompt è ci indica che R in attesa di nuovi comandi da eseguire. La Console di R è un’interfaccia a linea di comando. A differenza di altri programmi “punta e clicca”, in R è necessario digitare i comandi utilizzando la tastiera. Per eseguire dei comandi possiamo direttamnte scrivere nella Console le operazioni da eseguire e premere invio. R eseguirà immediatamente i nostro comando, riporterà il risultato e nella linea successiva apparirà nuovamente il prompt indicando che R è pronto ad eseguire un altro comando (vedi Figura 2.3). Figure 2.3: Esecuzione di comandi direttamente nella console Nel caso di comandi scritti su più righe, vedi l’esempio di Figura 2.4, è possibile notare come venga mostrato il simbolo + come prompt. Questo indica che R è in attesa che l’intero comando venga digitato prima che esso venga eseguito. Figure 2.4: Esecuzione di un comando su più righe Come avrai notato facendo alcune prove, i comandi digitati nella Console vengono eseguiti immediatamente ma non sono salvati. Per rieseguire un comando, possiamo navigare tra quelli precedentementemente eseguiti usando le freccie della tastiera \\(\\uparrow\\downarrow\\). Tuttavia, in caso di errori dovremmo riscrivere e rieseguire tutti i comandi. Siccome scrivere codici è un continuo “try and error”, lavorare unicamente dalla Console diventa presto caotico. Abbiamo bisogno quindi di una soluzione che ci permetta di lavrorare più comodamente sui nostri codici e di poter salvare i nostri comandi da eseguire all’occorrenza con il giusto ordine. La soluzione sono gli Scripts che introdurremo vedremo nella prossima sezione. Potrebbe accadere che per qualche errore nel digitare un comando o perchè sono richiesti lunghi tempi computazionali, la Console di R diventi non responsiva. In questo caso è necessario interrompere la scrittura o l’esecuzione di un comando. Vediamo due situazioni comuni: Continua a comparire il prompt +. Specialmente nel caso di utilizzo di parentesi e lunghi comandi, accade che una volta premuto invio R non esegua alcun comando ma resta in attesa mostrando il prompt + (vedi Figure seguente). Questo è in genere dato da un errore nella sintassi del comando (e.g., un errore nell’uso delle parentesi o delle virgole). Per riprendere la sessione è necessario premere il tasto esc della tastiera. L’apprire del prompt &gt;, indica che R è nuovamente in ascolto pronto per esequire un nuovo comando ma attento a non ripetere lo stesso errore, la sintassi dei comandi è importante (vedi Capitolo TODO). R non risponde. Alcuni calcoli potrebbero richiedere molto tempo o semplicemnte un qualche problema ha mandato in loop la tua sessione di lavoro. In questa situazione la Console di R diventa non responsiva. Nel caso fosse necessario interrompere i processi attualmente in esecuzione devi premere il pulsante STOP come indicato nella Figura seguente. R si fermerà e ritornerà in attesa di nuovi comandi (prompt &gt;). In alcuni casi estremi in cui R sembra non rispondere, usa i comandi Ctrl-C per forzare R a interrompere il processo in esecuzione. Come ultima soluzione ricorda uno dei principi base dell’informatica “spegni e riaccendi” (a volte potrebbe bastare chiudere e riaprire RStudio). 2. Source: il tuo blocco appunti In questa parte vengono mostrati i tuoi Scripts. Questi non sono altro che degli speciali documenti (con estensione “.R”) in cui sono salvati i tuoi codici e comandi che potrai eseguire quando necessario in R. Gli Scripts ti permetteranno di lavorare comodamente sui tuoi codici, scrivere i comandi, corregerli, organizzarli, aggiungere dei commenti e soprattutto salvarli. Dopo aver terminato di scrivere i comandi, posiziona il cursore sulla stessa linea del comando che desideri eseguire e premi command + invio (MacOs) o Ctrl+R (Windows). Automaticamente il comando verà copiato nella Console ed eseguito. In alternativa potrai premere il tasto Run indicato dalla freccia in Figura 2.5. Figure 2.5: Esecuzione di un comando da script premi command + invio (MacOs)/ Ctrl+R (Windows) o premi il tasto indicato dalla freccia Se hai guardato con attenzione lo script rappresentato in Figura 2.5, potresti aver notato delle righe di testo verde precedute dal simbolo #. Questo simbolo può essere utlizzato per inserire dei commenti all’interno dello script. R ignorerà qualsiasi commento ed eseguirà soltato le parti di codici. L’utilizzo dei commenti è molto importante nel caso di script complessi poichè ci permette di spiegare e documentare il codice che viene eseguito. Nel Capitolo TODO approfondiremo il loro utilizzo. 3. Environment e History: la sessione di lavoro Qui sono presentati una serie di pannelli utili per valutare informazioni inerenti alla propria sessione di lavoro. I pannelli principali sono Environment e History (gli altri pannelli presenti in Figura 2.6 riguardanno funzioni avanzate di RStudio). Environment: elenco tutti gli oggetti e variabili attualmente presenti nel’ambiente di lavoro. Approfondiremo i concetti di variabili e di ambiente di lavoro rispettivamente nel Capitolo TODO e Capitolo TODO. Figure 2.6: Environment - Elenco degli oggetti e variabili presenti nel’ambiente di lavoro History: elenco di tutti i comandi precedentemente eseguiti nella console. Nota che questo no equivale ad uno script, anzi, è semplicemente un elenco non modificabile (e quasi mai usato). 4. File, Plots, Package, Help: system management In questa parte sono raccolti una serie di pannelli utilizzatti per interfacciarsi con ulteriori risorse del sistema (e.g., file e pacchetti) o produrre output quali grafici e tabelle. Files: pannello da cui è possibile navigare tra tutti i file del proprio computer Figure 2.7: Files - permette di navigare tra i file del proprio computer Plots: pannello i cui vengono prodotti i grafici e che è possibil esportare cliccando Export. Figure 2.8: Plots - presentazione dei grafici Packages: elenco dei pacchetti di R (questo argomento verrà approfondito nel Capitolo TODO). Figure 2.9: Packages - elenco dei pacchetti di R Help: utilizzato per navigare la documentazione interna di R (questo argomento verrà approfondito nel Capitolo TODO). Figure 2.10: Help - documentazione di R RStudio permette un ampio grado di personalizzazione dell’intrafaccia grafica utilizzata. E’ possibile cambiare tema, font e disposizione dei pannelli a seconda dei tuoi gusti ed esigenze. Prova a cambiare il tema dell editor in Idle Fingers per utlizzare on background scuro che affatichi meno la vista (vedi Figura seguente). Clicca su RStudio &gt; Preferenze &gt; Appearence (MacOS) o Tools &gt; Options &gt; Appearence (Windows). "],["first-comands.html", "Capitolo 3 Primi Passi in R 3.1 Operatori Matematici 3.2 Operatori Relazionali e Logici", " Capitolo 3 Primi Passi in R Ora che abbiamo iniziato a famigliarizzare con il nostro stumento di lavoro possiamo finalmente dare fuoco alle polveri e concentraci sulla scrittura di codici! In questo capitolo muoveremo i primi passi in R. Inizieremo vedendo come utilizzare operatori matematici, relazionali e logici per compiere semplici operazioni in R. Imparare R è un lungo percorso (scoop: questo percorso non termina mai dato che R è sempre in continuo sviiluppo). Soprattutto all’inizio può sembrare eccessivamente difficile poichè è si incontrano per la prima volta molti comandi e concetti di programmazione. Tuttavia, una volta famigliarizzato con gli apetti di base, la progressione diventa sempre più veloce (inarrestabile direi!). In questo capitolo introdurremo per la prima volta molti elementi che saranno poi ripresi e approfonditi nei seguenti capitoli. Quindi non preoccuparti se non tutto ti sarà chiaro fin da subito. Imparare il tuo primo linguaggio di programmazione è difficile ma da qualche parte bisogna pure iniziare. Pronto per le tue prime linee di codice? Let’s become a useR! 3.1 Operatori Matematici R è un’ottima calcolatrice. Nella Tabella 3.1 sono elencati i principali operatori matematici e funzioni usate in R. Table 3.1: Operatori Matematici Funzione Nome Esempio x + y Addizione &gt; 5 + 3 [1] 8 x - y Sottrazione &gt; 7 - 2 [1] 5 x * y Moltiplicazione &gt; 4 * 3 [1] 12 x / y Divisione &gt; 8 / 3 [1] 2.666667 x %% y Resto della divisione &gt; 7 %% 5 [1] 2 x %/% y Divisione intera &gt; 7 %/% 5 [1] 1 x ^ y Potenza &gt; 3 ^ 3 [1] 27 abs(x) Valore assoluto &gt; abs(3-5^2) [1] 22 sign(x) Segno di un’espressione &gt; sign(-8) [1] -1 sqrt(x) Radice quadrata &gt; sqrt(25) [1] 5 log(x) Logaritmo naturale &gt; log(10) [1] 2.302585 exp(x) Esponenziale &gt; exp(1) [1] 2.718282 sin(x)cos(x)tan(x)asin(x)acos(x)atan(x) Funzioni trigonometriche &gt;sin(pi/2) [1]1 &gt;cos(pi/2) [1]6.123234e-17 factorial(x) Fattoriale &gt; factorial(6) [1] 720 choose(n, k) Coefficiente binomiale &gt; choose(5,3) [1] 10 Nota come per svolgere operazioni come la radice quadrata o il valore assoluto vengono utlizzate delle specifiche funzioni. In R le funzioni sono richiamate digitando &lt;nome-funnzione&gt;() (e.g., sqrt(25)) indicando all’interno delle parentesi tonde gli argomenti della funzione. Approfondiremo le funzioni nella Sezione TODO. 3.1.1 Ordine Operazioni Nello svolgere le operazioni, R segue lo stesso l’ordine usato nelle normali espressioni matematiche. Quindi l’ordine di precedenza degli operatori è: ^ (potenza) %% (resto della divisione) e %/% (divisione intera) * (moltiplicazione) e /(divisione) + (addizione) e -(sotttrazione) Nota che in presenza di funzioni (e.g., abs(), sin()), R per prima cosa sostituisca le funzioni con il loro risultato per poi procedere con l’esecuzione delle operazioni nell’ordine indicato precedentemente. L’ordine di esecuzione delle operazioni può essere controllato attraverso l’uso delle parentesi tondone (). R eseguirà tutte le operazioni incluse nelle parentesi seguendo lo stesso ordine inndicato sopra. Utilizzando più gruppi di parentesi possiamo ottenere i risultati desiderati. Nota che in R solo le parentesi tonde () sono utilizzate per gestire l’ordine con cui sono eseguite le oprazioni. Parentesi quadre [] e parentesi graffe {} sono invece speciali operatori utilizzati in R per altre ragioni come la selezione di elemente e la definizione di blocchi di codici. Argomenti che approfondiremo rispettivamente nel Capitolo TODO e Capitolo TODO. Esercizi Calcola il risultato delle seguenti operazioni utilizzando R: \\(\\frac{(45+21)^3+\\frac{3}{4}}{\\sqrt{32-\\frac{12}{17}}}\\) \\(\\frac{\\sqrt{7-\\pi}}{3\\ (45-34)}\\) \\(\\sqrt[3]{12-e^2}+\\ln(10\\pi)\\) \\(\\frac{\\sin(\\frac{3}{4}\\pi)^2+\\cos(\\frac{3}{2}\\pi)}{\\log_7{e^{\\frac{3}{2}}}}\\) \\(\\frac{\\sum_{n=1}^{10} n}{10}\\) Note per la risoluzione degli esercizi: In R la radice quadrata si ottine con la funzione sqrt() mentre per radici di indici diversi si utilizza la notazione esponenziale (\\(\\sqrt[3]{x}\\) è dato da x^(1/3)). Il valore di \\(\\pi\\) si ottiene con pi. Il valore di \\(e\\) si ottiene con exp(1). In R per i logaritmi si usa la funzione log(x, base=a), di base viene considerato il logaritmo naturale. 3.2 Operatori Relazionali e Logici 3.2.1 Operatori Relazionali In R è possibile valutare se una data relazione è vera o fasa. Ad esempio, posiamo valutare se “2 è minore di 10” o se “4 numero è un numero pari”. Queste operazioni al momento potrebbero sembrare non particolrmente interessanti ma si riveleranno molto utili nei capitoli successivi ad esempio per la selezione di elementi (vedi Capitolo TODO) o la definizionne di algoritmi (vedi Capitolo TODO). R valuterà le proposizioni e ci restituirà il valore TRUE se la proposizione è vera oppure FALSE se la proposizione è falsa. Nella Tabella 3.2 sono elencati gli operatori relazionali. Table 3.2: Operatori Relazionali Funzione Nome Esempio x == y Uguale &gt; 5 == 3 [1] FALSE x != y Diverso &gt; 7 != 2 [1] TRUE x &gt; y Maggiore &gt; 4 &gt; 3 [1] TRUE x &gt;= y Maggiore o uguale &gt; -2 &gt;= 3 [1] FALSE x &lt; y Minore &gt; 7 &lt; 5 [1] FALSE x &lt;= y Minore o uguale &gt; 7 &lt;= 7 [1] TRUE x %in% y inclusione &gt; 5 %in% c(3, 5, 8) [1] TRUE Attenzione che per valutare l’uguaglianza tra due valori non bisogna utilizzare = ma ==. Questo è un’errore molto comune ceh si commmette in continuazione. L’operatore = è utilizzato in R per assegnare un valore ad una variablie. Argomento che vederemo nella Sezione TODO Nota che in qualsiasi linguaggio di Programmazione, ai valori TRUE e FALSE sono associati rispettivament i valori numerici 1 e 0. Questi sono definiti valori booleani. TRUE == 1 # TRUE TRUE == 2 # FALSE TRUE == 0 # FALSE FALSE == 0 # TRUE FALSE == 1 # FALSE In R è possibile anche abbreviare TRUE e FALSE rispettivamente in T e F, sebbene sia una pratica non consigliata poichè potrebbe nonn essere chiara e creare fraintendimenti. T == 1 # TRUE T == TRUE # TRUE F == 0 # TRUE F == FALSE # TRUE In R è possibile congiungere più relazioni per valutare una desiderata proposizione. Ad esempio potremmo valutare se “17 è maggiore di 10 e minore di 20”. Per unire più relazioni in un’unica proposizione che R valuterà come TRUE o FALSE, vengono utilizati gli operatori logici riportati in Tabella 3.3. Table 3.3: Operatori Logici Funzione Nome Esempio !x Negazione &gt; !TRUE [1] FALSE x &amp; y Congiunzione &gt; TRUE &amp; FALSE [1] FALSE x | y Disgiunzione Inclusiva &gt; TRUE | FALSE [1] TRUE Questi operatori sono anche definiti operatori booleani e seguono le comuni definizioni degli operatori logici. In particolare abbiamo che: Nel caso della congiunzione logica &amp;, affinchè la proposizione sia vera è necessario che entrambe le relazioni siano vere. Negli altri casi la proposizione sarà valutarta falsa. Nel caso della disgiunzione inclusiva logica |, affinchè la proposizione sia vera è necessario che almeno una relaziona sia vara. La proposizione sarà valutarta falsa solo quando entrambe le relazioni sono false. 3.2.2 Ordine valutazione relazioni Nel valutare le veridicità delle proposizioni R esegue le operazioni nel seguente ordine: operatori matematici (e.g., ^, *, /, +, -, etc.) operatori relazionali (e.g., &lt;, &gt;, &lt;=, &gt;=, ==, !=) operatori logici (e.g., !, &amp;, |) La lista completa dell’ordine di esecuzione delle operazioni è riportata al seguente link https://stat.ethz.ch/R-manual/R-devel/library/base/html/Syntax.html. Ricordiamo che, in caso di dubbi riguardanti l’ordine di esecuzione delle operazioni, la cosa migliore è utilizzare le parentesi tonde () per disambiguare ogni possibile fraintendimento. Nota che l’operatore %in% che abbiamo precedentemente indicato tra gli operatori relazionali in realtà è un operatore speciale. In particolare, non segue le stesse regole degli altri operatori relazionlali per quanto riguarda l’ordine di esecuzione. La soluzione migliore? Usa le parentesi! Esercizi Definisici due relazioni false e due vere che ti permettano di valutare i risultati di tutti i possibili incroci che puoi ottenere con gli operatori logici &amp; e |. Definisci una proposizione che ti permetta di valutare se un numero è pari. Definisci un’altra proposizione per i nueri dispari (tip: cosa ti ricorda %%?). Definisci una proposizione per valutare la seguente condizione (ricordati di testare tutti i possibili scenari) “x è un numero compreso tra -4 e -2 oppure è un numero compreso tra 2 e 4”. Esegui le seguenti operazioni 4 ^ 3 %in% c(2,3,4) e 4 * 3 %in% c(2,3,4). Cosa osservi nell’ordine di esecuzione degli operatori? "],["objects-functions.html", "Capitolo 4 Due Compagni Inseparabili 4.1 Oggetti 4.2 Funzioni", " Capitolo 4 Due Compagni Inseparabili In questo capitolo introdurremmo i concetti di oggetti e funzioni, due elementi alla base di R (e di ogni linguaggio di programmazione). Potremmo pensare agli oggetti in R come a delle variabili che ci permettono di mantenere in memoria dei valori (e.g., i risultati dei nostri calcoli o i nostri dati). Le funzioni in R, invece, sono analoghe a delle funzioni matematiche che, ricevuti degli oggetti in input, compiono delle azioni e restituiscono dei nuovi oggetti in output. Questa è una iper-semplificazione (e pure tecnicamente non corretta) che ci permettere però di capire come, partendo dai nostri dati o valori iniziali, possiamo manipolarli applicando delle funzioni per ottenere attraverso differenti step i risultati desiderati (e.g., analisi statistiche o grafici e tabelle). Qui valuteremo gli aspetti fondamentali che riguardano l’utilizzo degli oggetti e delle funzioni mentre saranno approfonditi rispettivamente in tutta la seconda e terza sezione del libro (TODO). 4.1 Oggetti Quando eseguiamo un commando in R, il risultato ottenuto viene immediatamente mostrato in Console. Tale risultato, tuttavia, non viene salvato in memoria e quindi non potrà essere riutilizzato in nessuna operazione futura. Condurre delle analisi in questo modo sarebbe estremamente complicato ed inefficiente. La soluzione più ovvia è quella di salvare in memoria i nostri risultati intermedi per poterli poi riutilizzare nel corso delle nostre analisi. Si definisce questo processo come assegnare un valore ad un oggetto. 4.1.1 Assegnare e Richiamare un oggetto Per assegnare il valore numerico 5 all’oggetto x è necessario eseguire il seguente comando: x &lt;- 5 La funzione &lt;- ci permette di assegnare i valori che si trovano alla sua destra all’oggetto il cui nome è definito alla sinistra. Abbiamo pertanto il seguente pattern: &lt;nome-oggetto&gt; &lt;- &lt;valore-assegnato&gt;.Notate come in Console appaia solo il comando appena eseguito ma non venga mostrato alcun risultato. Per utilizzare il valore contenuto nell’oggetto sarà ora sufficiente richiamare nel proprio codice il nome dell’oggetto desiderato. x + 3 ## [1] 8 E’ inoltre possibile “aggiornare” o “sostituire” il valore contenuto in un oggetto. Ad esempio: x &lt;- x*10 x ## [1] 50 x &lt;- &quot;Hello World!&quot; x ## [1] &quot;Hello World!&quot; Nel primo caso abbiamo prima utilizzato il vecchio valore contenuto in x per calcolare il nuovo risultato che è stato assegnato a x. Nel secondo caso abbiamo sostituito il vecchio valore di x con un nuovo valore (nell’esempio una stringa di caratteri). Esistono due operatori principali che sono usati per assegnare un valore ad un oggetto: l’operatore &lt;- e l’operatore =. Entrambi sono validi e spesso la scelta tra i due diventa solo una questione di stile personale. x_1 &lt;- 45 x_2 = 45 x_1 == x_2 ## [1] TRUE Esistono, tuttavia, alcune buone ragioni per preferire l’uso di &lt;- rispetto a = (attewnti a non confonderlo con l’operatore relazionale ==). L’operazione di assegnazione è un’operazione che implica una direzionalità, il chè è reso esplicito dal simbolo &lt;- mentre il simbolo = non evidenzia questo aspetto e anzi richiama la relazione di uguaglianza in matematica. La decisione su quale operatore adottare è comunque libera, ma ricorda che una buona norma nella programmazione riguarda la consistenza: una volta presa una decisione è bene mantenerla per facilitare la comprensione del codice. 4.1.2 Nomi degli oggetti La scelta dei nomi degli oggetti sembra un aspetto secondario ma invece ha una grande importanza per facilitare la chiarezza e comprensione dei codici. Ci sono alcune regole che discriminano i nomi validi da nomi non validi. Il nome di un oggetto deve iniziare con una lettera e può contenere lettere, numeri, underscore (_), o punti (.). potrebbe anche iniziare con un punto (.) ma in tal caso non può essere seguito da un numero. non deve contenere caratteri speciali come #, &amp;, $, ?, etc. non deve essere una parola riservata ovvero quelle parole che sono utilizzate internamente da R con un significato speciale (e.g, TRUE, FALSE etc.). Nota come R sia Case-Sensitive, ovvero distingua tra lettere minuscole e maiuscole. Nel seguente esempio i due nomi sono considerate diversi e pertanto non avviene una sovrascrizione ma due differenti oggetti sono creati: My_name &lt;- &quot;Monty&quot; my_name &lt;- &quot;Python&quot; My_name ## [1] &quot;Monty&quot; my_name ## [1] &quot;Python&quot; Inoltre, il nome ideale di un oggetto dovrebbe essere: auto-descrittivo: dal solo nome dovrebbe essere possibile intuire il contenuto dell’oggetto. Un nome generico quale x o y ci sarebbero di poco aiuto poichè potrebbero contenere qualsiasi informazione. Invece un nome come weight o gender ci suggerirebbe chiaramente il contenuto dell’oggetto (e.g., il peso o gender dei partecipanti del nostro studio). dell giusta lunghezza: non deve essere ne troppo breve (evitare sigle incomprensibili) e neppure troppo lunghi. La lunghezza corretta è quella che permette al nome di esssere sufficientemente informativo senza aggiungere inutili dettagli. In genere sono sufficienti 2 o 3 parole. Spesso più parole sono usate per ottenere un nome sufficientemente chiaro. Dato che però non è possibile includere spazi in un nome, nasce il problema di come unire più parole senza ceh il nome diventi incomprensibile, ad esempio mediatestcontrollo. Esistono diverse convenzioni tra cui: CamelCase. L’inizio di una nuova parole viene indicata con l’uso della prima lettera maiuscola. Ad esempio mediaTestControllo. snake_case. L’inizio di una nuova parola viene indicata con l’uso carattere _. Ad esempio media_test_controllo. una variante al calssico snake_case riguarda l’uso del ., ad esempio media.test.controllo. Questo approccio in genere è evitato poichè in molti linguaggi di progtrammazione (ed anche in R in alcune condizioni) il carattere . è un carattere speciale. In genere viene raccomandato di seguire la convenzione snake_case. Tuttavia, la decisione su quale convenzione adottare è libera, ma ricorda ancora che una buona norma nella programmazione riguarda la consistenza: una volta presa una decisione è bene mantenerla per facilitare la comprensione del codice. 4.1.3 Tipologie di Oggetti In R abbiamo differenti tipologie di oggetti (o megli di strutture dati): Vettori Matrici Dataframe Liste La loro definizione, le loro caratteristiche ed il loro utilizzo sarà discusso nella seconda sezione di quessto libro TODO 4.2 Funzioni arguments input output nomi riservati ?reserved trick tab help function 4.2.1 "],["working-session.html", "Capitolo 5 Sessione di Lavoro 5.1 Infobox 5.2 Problema + Google = Soluzione", " Capitolo 5 Sessione di Lavoro Working in progress. 5.1 Infobox Illustrations included in images/ are retrieved from rstudio4edu-book under CC-BY-NC. Remember to include an Attributions section in the book and repository’s README file. Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! 5.2 Problema + Google = Soluzione Quando si approccia la scrittura di codice, anche molto semplice la cosa che sicuramente capiterà più spesso sarà riscontrare errori e quindi trovare il modo per risolverli. Qualche programmatore esperto direbbe che l’essenza stessa di programmare è in realtà risolvere gli errori che il codice produce. L’errore non è quindi un difetto o un imprevisto, ma parte integrante della scrittura del codice. L’importante è capire come gestirlo. Abbiamo tutti le immagini in testa di programmatori da film che scrivono codice alla velocità della luce, quando nella realtà dobbiamo spesso affrontare bug, errori di output o altri problemi vari. Una serie di skills utili da imparare sono: Comprendere a fondo gli errori (non banale) Sapere come e dove cercare una soluzione (ancora meno banale) In caso non si trovi una soluzione direttamente, chiedere aiuto in modo efficace Comprendere gli errori Rispetto agli errori, R è solitamente abbastanza esplicito nel farci capire il problema. Ad esempio usare una funzione di un pacchetto che non è stato caricato di solito fornisce un messaggio del tipo Error in funzione : could not find function \"funzione\". Ricercare soluzioni Altre situazioni o messaggi potrebbero non essere altrettanto immediati, in quel caso Google è il nostro miglior amico. Cercando infatti il messaggio di errore/warning su Google, al 99% avremo altre persone che hanno avuto lo stesso problema e probabilmente anche una soluzione. Il modo migliore per cercare è copiare e incollare su Google direttamente l’output di errore di R come ad esempio Error in funzione : could not find function \"funzione\" piuttosto che descrivere a parole il problema. I messaggi di errore sono standard per tutti, la tua descrizione invece no. Cercando in questo modo vedrete che molti dei risultati saranno esattamente riferiti al vostro errore: 5.2.0.1 Chiedere una soluzione Se invece il vostro probelma non è un messaggio di errore ma un utilizzo specifico di R allora il consiglio è di usare una ricerca del tipo: argomento + breve descrizione problema + R. Nelle sezioni successive vedrete nel dettaglio altri aspetti della programmazione ma se volete ad esempio calcolare la media in R potrete scrivere compute mean in R. Mi raccomando, fate tutte le ricerche in inglese perchè le possibilità di trovare una soluzione sono molto più alte. Dopo qualche ricerca, vi renderete conto che il sito che vedrete più spesso si chiama Stack Overflow. Questo è una manna dal cielo per tutti i programmatori, a qualsiasi livello di expertise. E’ una community dove tramite domande e risposte, si impara a risolvere i vari problemi ed anche a trovare nuovi modi di fare la stessa cosa. E’ veramente utile oltre che un ottimo modo per imparare. L’ultimo punto di questa piccola guida alla ricerca di soluzioni, riguarda il fatto di dover non solo cercare ma anche chiedere. Dopo aver cercato vari post di persone che richiedevano aiuto per un problema noterete che le domande e le risposte hanno sempre una struttura simile. Questo non è solo un fatto stilistico ma anzi è molto utile per uniformare e rendere chiara la domanda ma sopratutto la risposta, in uno spirito di condivisione. C’è anche una guida dedicata per scrivere la domanda perfetta. In generale1: Titolo: un super riassunto del problema Contesto: linguaggio (es. R), quale sistema operativo (es. Windows) Descrizione del problema/richiesta: in modo chiaro e semplice ma non troppo generico Codice ed eventuali dati per capire il problema L’ultimo punto di questa lista è forse il più importante e si chiama in gergo tecnico REPREX (Reproducible Example). E’ un tema leggermente più avanzato ma l’idea di fondo è quella di fornire tutte le informazioni possibili per poter riprodurre (e quindi eventualmente trovare una soluzione) il codice di qualcuno nel proprio computer. Se vi dico “R non mi fa creare un nuovo oggetto, quale è l’errore?” è diverso da dire “il comando oggetto -&gt; 10 mi da questo errore Error in 10 &lt;- oggetto : invalid (do_set) left-hand side to assignment, come posso risolvere?” Ci sono anche diversi pacchetti in R che rendono automatico creare questi esempi di codice da poter condividere, come il pacchetto reprex. Fonte: Writing the perfect question - Jon Skeet↩︎ "],["introduzione.html", "Introduzione", " Introduzione Working in progress. "],["vector.html", "Capitolo 6 Vettori", " Capitolo 6 Vettori Working in progress. "],["matrix.html", "Capitolo 7 Matrici", " Capitolo 7 Matrici Working in progress. "],["dataframe.html", "Capitolo 8 Dataframe", " Capitolo 8 Dataframe Working in progress. "],["list.html", "Capitolo 9 Liste", " Capitolo 9 Liste Working in progress. "],["introduzione-1.html", "Introduzione", " Introduzione Working in progress. "],["functions.html", "Capitolo 10 Definizione di Funzioni", " Capitolo 10 Definizione di Funzioni Working in progress. "],["coditionals.html", "Capitolo 11 Programmazione Condizionale", " Capitolo 11 Programmazione Condizionale Working in progress. "],["loop.html", "Capitolo 12 Attenti al loop", " Capitolo 12 Attenti al loop Working in progress. "],["introduzione-2.html", "Introduzione", " Introduzione Working in progress. "],["attachment.html", "Capitolo 13 Caso Studio I: Attaccamento", " Capitolo 13 Caso Studio I: Attaccamento Working in progress. "]]
